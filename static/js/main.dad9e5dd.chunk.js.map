{"version":3,"sources":["components/API.tsx","components/utils.tsx","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/images.jpeg","app.styles.ts","App.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","category","a","endpoint","fetch","response","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","console","log","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","setGameOver","setCategory","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyles","createGlobalStyle","BGImage","NUMBERS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","categories","setCategories","setTotalQuestions","setDifficulty","startTrivia","newQuestions","useEffect","axios","get","then","res","trivia_categories","onChange","event","target","id","name","num","undefined","e","currentTarget","prev","answerObject","length","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAeaA,EAAkB,uCAAG,WAAOC,EAAeC,EAAmBC,GAAzC,mBAAAC,EAAA,6DACxBC,EADwB,6CACyBJ,EADzB,uBAC8CC,EAD9C,mCACmFC,GADnF,kBAGHG,MAAMD,GAHH,cAGpBE,EAHoB,gBAIPA,EAASC,OAJF,cAIpBC,EAJoB,yBAKnBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eAEdA,GAFa,IAGhBC,SCvBaC,EDuBS,GAAD,mBAAKF,EAASG,mBAAd,CAAiCH,EAASI,iBCtB7E,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDeK,kCAY1BM,QAAQC,IAAR,MAZ0B,0DAAH,0D,cEblBC,EAAUC,IAAOC,IAAV,ygBA6BPC,EAAgBF,IAAOC,IAAV,obAYR,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACZD,EACI,4CACCA,GAAWC,EACZ,2CACA,8C,OCAKC,EAlCwB,SAAC,GAA2G,IAAzGhB,EAAwG,EAAxGA,SAAUC,EAA8F,EAA9FA,QAASgB,EAAqF,EAArFA,SAAUC,EAA2E,EAA3EA,WAAYC,EAA+D,EAA/DA,eAAgBC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,YAM5H,OACI,cAACZ,EAAD,UACI,gCACI,oBAAGa,UAAY,SAAf,uBACeJ,EADf,MACkCC,KAElC,mBAAGI,wBAA2B,CAAEC,OAAQzB,KACxC,8BACKC,EAAQF,KAAI,SAAC2B,GAAD,OACT,cAACb,EAAD,CAEAC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYS,iBAAkBD,EACvCX,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,UAAWA,EAHpC,SAKA,8BACI,wBAAQE,WAAYV,EAA2BW,MAASH,EAAQI,QAAWb,EAA3E,SACI,sBAAMO,wBAA2B,CAAEC,OAAQC,QAFvCA,IAJPA,QAYZP,IAAmBC,GAAkBF,EAAa,wBAAQK,UAAY,MAAMO,QA3BrE,WAChBT,GAAY,GACZC,EAAY,IAyB+C,2BAA0E,WC1C9H,MAA0B,oCCI5BS,EAAeC,YAAH,sTAKGC,GAafvB,EAAUC,IAAOC,IAAV,6nE,iBCHdsB,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IA4HzCC,EAzHH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEkBF,mBAA0B,IAF5C,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIsBN,mBAAyB,IAJ/C,mBAITO,EAJS,KAIIC,EAJJ,OAKUR,mBAAS,GALnB,mBAKTS,EALS,KAKFC,EALE,OAMgBV,oBAAS,GANzB,mBAMTW,EANS,KAMC1B,EAND,OAOgBe,mBAAc,GAP9B,mBAOT7C,EAPS,KAOC+B,EAPD,OAQoBc,mBAAsB,IAR1C,mBAQTY,EARS,KAQGC,EARH,OAS4Bb,mBAAS,GATrC,mBASThB,EATS,KASO8B,EATP,OAUoBd,mBAAS,QAV7B,mBAUT9C,EAVS,KAUG6D,EAVH,KAYVC,EAAW,uCAAG,4BAAA5D,EAAA,6DAClB8C,GAAW,GACXjB,GAAY,GAFM,SAGSjC,EAAmBgC,EAAgB9B,EAAYC,GAHxD,OAGZ8D,EAHY,OAIlBb,EAAaa,GACbP,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GARO,4CAAH,qDAWjBgB,qBAAU,WACRC,IAAMC,IAAI,wCACTC,MAAK,SAAAC,GACJT,EAAcS,EAAI7D,KAAK8D,mBACvBnD,QAAQC,IAAIiD,EAAI7D,KAAK8D,mBACrBnD,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIW,GACZZ,QAAQC,IAAInB,QAEb,CAACC,EAAU6B,EAAgB9B,IAmC9B,OACE,qCACE,cAACyC,EAAD,IACA,eAAC,EAAD,WACE,4CACCgB,EACC,qCACE,mBAAGxB,UAAY,OAAf,iCACA,wBAAQqC,SApBG,SAACC,GACpBvC,EAAYuC,EAAMC,OAAOjC,QAmBjB,SACCmB,EAAWjD,KAAI,SAACR,GACjB,OAAO,wBAA4BsC,MAAStC,EAASwE,GAA9C,SAAmDxE,EAASyE,MAA7CzE,EAASwE,SAG/B,mBAAGxC,UAAY,OAAf,mCACA,wBAAQqC,SAtBW,SAACC,GAC5BX,EAAkBW,EAAMC,OAAOjC,QAqBvB,SACCK,EAAQnC,KAAI,SAACkE,GACV,OAAO,yBAAoBpC,MAASoC,EAA7B,cAAoCA,EAApC,gBAAeA,QAG1B,mBAAG1C,UAAY,OAAf,8BACA,yBAAQqC,SAxBO,SAACC,GACxBV,EAAcU,EAAMC,OAAOjC,QAuBnB,UACE,wBAAQA,MAAQ,OAAhB,oBACA,wBAAQA,MAAQ,SAAhB,sBACA,wBAAQA,MAAQ,OAAhB,uBAEF,wBAAQN,UAAU,QAAQO,QAASsB,EAAnC,sBAIA,KACFL,EAAqD,KAA1C,oBAAGxB,UAAU,QAAb,oBAA6BsB,KACzCR,EAAU,qBAAKd,UAAU,kBAAyB,MACjDc,IAAYU,GACZ,cAAC,EAAD,CACE5B,eAAgBsB,EAAS,EACzBrB,eAAgBA,EAChBpB,SAAUuC,EAAUE,GAAQzC,SAC5BC,QAASsC,EAAUE,GAAQxC,QAC3BiB,WAAYyB,EAAcA,EAAYF,QAAUyB,EAChDjD,SAvEU,SAACkD,GACjB,IAAKpB,EAAU,CACb,IAAMrB,EAASyC,EAAEC,cAAcvC,MACzBf,EAAUyB,EAAUE,GAAQrC,iBAAmBsB,EACjDZ,GAASgC,GAAS,SAAAuB,GAAI,OAAIA,EAAM,KACpC,IAAMC,EAAe,CACnBtE,SAAUuC,EAAUE,GAAQzC,SAC5B0B,SACAZ,UACAa,cAAeY,EAAUE,GAAQrC,gBAEnCwC,GAAe,SAAAyB,GAAI,4BAAQA,GAAR,CAAcC,SA6D7BjD,YAAeA,EACfC,YAAeA,IAGjByB,GAAaV,GAAWM,EAAY4B,SAAW9B,EAAS,GAAKA,IAAWrB,EAAiB,EAIvF,KAHF,wBAAQG,UAAU,OAAOO,QA9DX,WAClB,IAAM0C,EAAe/B,EAAS,EAC9BC,EAAU8B,IA4DN,kCCjIVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dad9e5dd.chunk.js","sourcesContent":["import { shuffleArray } from './utils'\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    type: string;\n    question: string;\n    incorrect_answers: string[];\n} \n\nexport type QuestionState = Question& {\n    answers: string[];\n}\n\nexport const fetchQuizQuestions = async (amount:number, difficulty:string, category:number) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple&category=${category}`\n    try {\n        const response = await fetch(endpoint)\n        const data = await response.json()\n        return data.results.map((question: Question) => (\n            {\n                ...question,\n                answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n            }\n        ))\n    } catch (error) {\n        console.log(error)\n    }\n   \n}","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n\n  .btn{\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react'\nimport { ButtonWrapper, Wrapper } from './QuestionCard.styles'\n\ntype Props = ({\n    question: string,\n    answers: string[],\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void,\n    userAnswer: any,\n    questionNumber: number,\n    totalQuestions: number,\n    setGameOver: any,\n    setCategory: any\n})\n\nconst QuestionCard:  React.FC<Props> = ({ question, answers, callback, userAnswer, questionNumber, totalQuestions, setGameOver, setCategory }) => {\n    const handleClick = () => {\n        setGameOver(true)\n        setCategory(9)\n    }\n\n    return (\n        <Wrapper>\n            <div>\n                <p className = 'number'>\n                    Question: {questionNumber} / {totalQuestions}\n                </p>\n                <p dangerouslySetInnerHTML = {{ __html: question }} />\n                <div>\n                    {answers.map((answer) => (\n                        <ButtonWrapper\n                        key={answer}\n                        correct={userAnswer?.correctAnswer === answer}\n                        userClicked={userAnswer?.answer === answer}\n                        >\n                        <div key = {answer}>\n                            <button disabled = {userAnswer ? true : false} value = {answer} onClick = {callback} >\n                                <span dangerouslySetInnerHTML = {{ __html: answer }}></span>\n                            </button>\n                        </div>\n                        </ButtonWrapper>\n                    ))}\n                </div>\n                {questionNumber === totalQuestions && userAnswer ? <button className = 'btn' onClick = {handleClick}> Play Again? </button>: null}\n            </div>\n        </Wrapper>\n    )\n}\n\nexport default QuestionCard\n","export default __webpack_public_path__ + \"static/media/images.142057eb.jpeg\";","\nimport styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/images.jpeg';\n\nexport const GlobalStyles = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #fff;\n  }\n  \n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  .scores{\n      display: flex; \n      > p{\n          margin: 1rem;\n      } \n  }\n\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin-top: 25px;\n    marging-bottom: 0;\n  }\n\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n    height: 3rem;\n    width: 8.9rem;\n  }\n\n  select {\n      width: 40vw;\n      margin: 0;\n      height: 3rem;\n      border: 2px solid #d38558;\n      box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n      border-radius: 10px;\n  }\n\n  .text {\n    font-size: 1.3rem;\n    margin: 0.85rem;\n    color: #f9f1f1;\n  }\n\n  .lds-hourglass {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n\n  .lds-hourglass:after {\n    content: \" \";\n    display: block;\n    border-radius: 50%;\n    width: 0;\n    height: 0;\n    margin: 8px;\n    box-sizing: border-box;\n    border: 32px solid #fff;\n    border-color: #fff transparent #fff transparent;\n    animation: lds-hourglass 1.2s infinite;\n  }\n  \n  @keyframes lds-hourglass {\n    0% {\n      transform: rotate(0);\n      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n    }\n    50% {\n      transform: rotate(900deg);\n      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n    }\n    100% {\n      transform: rotate(1800deg);\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { fetchQuizQuestions} from './components/API'\nimport QuestionCard from './components/QuestionCard'\nimport { QuestionState } from './components/API'\nimport { GlobalStyles, Wrapper } from './app.styles'\nimport axios from 'axios'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correctAnswer: string;\n  correct: boolean;\n}\n\ntype CatObject = {\n  id: number;\n  name: string;\n}\n\nconst NUMBERS = [5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 25]\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n  const [category, setCategory] = useState<any>(9)\n  const [categories, setCategories] = useState<CatObject[]>([])\n  const [totalQuestions, setTotalQuestions] = useState(5)\n  const [difficulty, setDifficulty] = useState('easy')\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n    const newQuestions = await fetchQuizQuestions(totalQuestions, difficulty, category)\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php')\n    .then(res => {\n      setCategories(res.data.trivia_categories)\n      console.log(res.data.trivia_categories)\n      console.log(category)\n      console.log(totalQuestions)\n      console.log(difficulty)\n    })\n  }, [category, totalQuestions, difficulty])\n\n \n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n      if (!gameOver) {\n        const answer = e.currentTarget.value\n        const correct = questions[number].correct_answer === answer\n        if (correct) setScore(prev => prev +1)\n        const answerObject = {\n          question: questions[number].question,\n          answer,\n          correct,\n          correctAnswer: questions[number].correct_answer\n        }\n        setUserAnswers(prev => [...prev, answerObject])\n      }\n  }\n\n  const nextQuestion  = () => {\n      const nextQuestion = number + 1\n      setNumber(nextQuestion)\n  }\n\n  const handleChange = (event:any) => {\n    setCategory(event.target.value)\n  }\n\n  const handleTotalQuestions = (event:any) => {\n    setTotalQuestions(event.target.value)\n  }\n\n  const handleDifficulty = (event:any) => {\n    setDifficulty(event.target.value)\n  }\n\n  return (\n    <>\n      <GlobalStyles />\n      <Wrapper>\n        <h1>Quiz Time!</h1>\n        {gameOver  ? (\n          <>\n            <p className = 'text'> Choose a Category </p>\n            <select onChange = {handleChange}> \n            {categories.map((category) => {\n            return <option key = {category.id} value = {category.id}>{category.name}</option>\n            })}\n            </select>\n            <p className = 'text'> How many Questions? </p>\n            <select onChange = {handleTotalQuestions}>\n            {NUMBERS.map((num) => {\n                return <option key = {num} value = {num}> {num} Questions </option>\n            })}\n            </select>\n            <p className = 'text'> How difficult? </p>\n            <select onChange = {handleDifficulty}>\n              <option value = 'easy'> Easy </option>\n              <option value = 'medium'> Medium </option>\n              <option value = 'hard'> Hard </option>\n            </select>\n            <button className='start' onClick={startTrivia}>\n              Start\n            </button>\n          </>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <div className=\"lds-hourglass\"></div> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={totalQuestions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n            setGameOver = {setGameOver}\n            setCategory = {setCategory}\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== totalQuestions - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}